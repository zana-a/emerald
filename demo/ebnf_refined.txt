program           = { statements }

type              = integer
                  | bool
                  | string
                  | list

numeric           = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

zero              = "0"

integer           = numeric | { numeric | zero }

mathOperator      = "+" | "-" | "*" | "/"

mathExpression    = integer
                  | mathExpression, mathOperator, mathExpression
                  | "(", mathExpression, ")"
                  , mathOperator, mathExpression
                  | "(", mathExpression, ")"

string            = "\"",
                  ?
                    any valid unicode chars providing that they are escaped
                    when needed
                  ?, "\""

stringOperator    = "<>"

stringExpression  = string
                  | stringExpression, stringOperator, stringExpression
                  | "(", stringExpression, ")"
                  , stringOperator, stringExpression
                  | "(", stringExpression, ")"

bool              = "true"
                  | "false"

logicOperator     = "||" | "&&" | "<" | ">" | "<=" | ">=" | "==" | "!="

logicExpression   = bool, logicOperator, bool
                  | "(", logicExpression, ")"
                  , logicOperator, logicExpression
                  | "(", logicExpression, ")"

lowerAlpha        = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
                  | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
                  | "u" | "v" | "w" | "x" | "y" | "z"

upperAlpha        = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                  | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                  | "U" | "V" | "W" | "X" | "Y" | "Z"

alpha             = lowerAlpha | upperAlpha

alphanumeric      = alpha | numeric

whitespace        = " " | "\t" | "\n" | "\s"

identifier        = alpha, { alphanumeric }

variable          =  identifier, "=", expression

function          = "def", identifier, "(", { type | type, "," }, ")", block

expression        = mathExpression
                  | stringExpression
                  | logicExpression

statement         = block
                  | cond
                  | loop
                  | function
                  | variable

list              = "[", { type | type, "," } "]"

block             = "do", { statement }, "end"

guardCommand      = expression, "->", ( statement | block )

cond              = "cond", "do"
                  , { guardCommand }
                  , "end"

loop              = "loop", "do"
                  , { guardCommand }
                  , "end"

moduleIdentifier  = upperAlpha, { alphanumeric }

module            = "mod", moduleIdentifier, "do"
                  , { function | module }
                  , "end"

funcCall          = identifier, "(", { type | type, "," }, ")"

listIndexCall     = identifier, "[", { integer }, "]"

moduleFuncCall    = moduleIdentifier, "::", functionCall
                  | moduleIdentifier, { "::", moduleIdentifier }, functionalCall

variableCall      = identifier

